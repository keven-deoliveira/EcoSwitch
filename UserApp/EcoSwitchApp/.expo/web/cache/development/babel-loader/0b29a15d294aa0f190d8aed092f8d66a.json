{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { useState } from 'react';\nimport axios, * as others from 'axios';\n\nvar _useState = useState({\n  \"Temp\": \"0\",\n  \"Humidity\": \"0\"\n}),\n    _useState2 = _slicedToArray(_useState, 2),\n    recentData = _useState2[0],\n    setRecentData = _useState2[1];\n\nvar _useState3 = useState('12345'),\n    _useState4 = _slicedToArray(_useState3, 2),\n    deviceID = _useState4[0],\n    setDeviceID = _useState4[1];\n\nvar _useState5 = useState('C'),\n    _useState6 = _slicedToArray(_useState5, 2),\n    tempMetric = _useState6[0],\n    setTempMetric = _useState6[1];\n\nvar _useState7 = useState('Last Updated: ---'),\n    _useState8 = _slicedToArray(_useState7, 2),\n    lastUpdated = _useState8[0],\n    setLastUpdated = _useState8[1];\n\nexport function updateRecentData(url) {\n  return _regeneratorRuntime.async(function updateRecentData$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return _regeneratorRuntime.awrap(axios.get(url).then(function (response) {\n            setRecentData(response.data);\n            setLastUpdated(\"Last Updated: \" + currentTime());\n          }));\n\n        case 2:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n;\nexport function currentTime() {\n  var d = new Date(),\n      n = '',\n      h = (d.getHours() < 10 ? '0' : '') + d.getHours(),\n      m = (d.getMinutes() < 10 ? '0' : '') + d.getMinutes();\n\n  if (h > 12 && h < 24) {\n    h = h - 12;\n    n = 'PM';\n  } else if (h == 24) {\n    h = h - 12;\n    n = 'AM';\n  } else {\n    n = 'PM';\n  }\n\n  return h + ':' + m + ' ' + n;\n}\nexport function changeTempMetric() {\n  if (tempMetric == 'C') {\n    var conversion = Math.round(recentData['Temp'] * 9 / 5 + 32);\n    setRecentData({\n      \"Temp\": conversion,\n      \"Humidity\": recentData['Humidity']\n    });\n    setTempMetric('F');\n  } else if (tempMetric == 'F') {\n    var conversion = Math.round((recentData['Temp'] - 32) * 5 / 9);\n    setRecentData({\n      \"Temp\": conversion,\n      \"Humidity\": recentData['Humidity']\n    });\n    setTempMetric('C');\n  }\n}","map":{"version":3,"sources":["C:/Users/Keven/Desktop/EcoSwitch/UserApp/EcoSwitchApp/functions.js"],"names":["useState","axios","others","recentData","setRecentData","deviceID","setDeviceID","tempMetric","setTempMetric","lastUpdated","setLastUpdated","updateRecentData","url","get","then","response","data","currentTime","d","Date","n","h","getHours","m","getMinutes","changeTempMetric","conversion","Math","round"],"mappings":";;AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,OAAOC,KAAP,EAAc,KAAKC,MAAnB,MAA+B,OAA/B;;AAEA,gBAAoCF,QAAQ,CAAE;AAAC,UAAQ,GAAT;AAAc,cAAY;AAA1B,CAAF,CAA5C;AAAA;AAAA,IAAOG,UAAP;AAAA,IAAmBC,aAAnB;;AACA,iBAAgCJ,QAAQ,CAAC,OAAD,CAAxC;AAAA;AAAA,IAAOK,QAAP;AAAA,IAAiBC,WAAjB;;AACA,iBAAoCN,QAAQ,CAAC,GAAD,CAA5C;AAAA;AAAA,IAAOO,UAAP;AAAA,IAAmBC,aAAnB;;AACA,iBAAsCR,QAAQ,CAAC,mBAAD,CAA9C;AAAA;AAAA,IAAOS,WAAP;AAAA,IAAoBC,cAApB;;AAGA,OAAO,SAAeC,gBAAf,CAAgCC,GAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CACGX,KAAK,CAACY,GAAN,CAAUD,GAAV,EACHE,IADG,CACE,UAACC,QAAD,EAAc;AAClBX,YAAAA,aAAa,CAACW,QAAQ,CAACC,IAAV,CAAb;AACAN,YAAAA,cAAc,oBAAkBO,WAAW,EAA7B,CAAd;AACD,WAJG,CADH;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMJ;AAGD,OAAO,SAASA,WAAT,GAAuB;AAC5B,MAAIC,CAAC,GAAG,IAAIC,IAAJ,EAAR;AAAA,MACAC,CAAC,GAAG,EADJ;AAAA,MAEAC,CAAC,GAAG,CAACH,CAAC,CAACI,QAAF,KAAa,EAAb,GAAgB,GAAhB,GAAoB,EAArB,IAA2BJ,CAAC,CAACI,QAAF,EAF/B;AAAA,MAGAC,CAAC,GAAG,CAACL,CAAC,CAACM,UAAF,KAAe,EAAf,GAAkB,GAAlB,GAAsB,EAAvB,IAA6BN,CAAC,CAACM,UAAF,EAHjC;;AAKA,MAAIH,CAAC,GAAG,EAAJ,IAAUA,CAAC,GAAG,EAAlB,EAAsB;AACpBA,IAAAA,CAAC,GAAGA,CAAC,GAAG,EAAR;AACAD,IAAAA,CAAC,GAAG,IAAJ;AACD,GAHD,MAIK,IAAIC,CAAC,IAAI,EAAT,EAAa;AAChBA,IAAAA,CAAC,GAAGA,CAAC,GAAG,EAAR;AACAD,IAAAA,CAAC,GAAG,IAAJ;AACD,GAHI,MAIA;AACHA,IAAAA,CAAC,GAAG,IAAJ;AACD;;AAED,SAAOC,CAAC,GAAG,GAAJ,GAAUE,CAAV,GAAc,GAAd,GAAoBH,CAA3B;AACD;AAGD,OAAO,SAASK,gBAAT,GAA4B;AACjC,MAAIlB,UAAU,IAAI,GAAlB,EAAuB;AACrB,QAAImB,UAAU,GAAGC,IAAI,CAACC,KAAL,CAAWzB,UAAU,CAAC,MAAD,CAAV,GAAqB,CAArB,GAAuB,CAAvB,GAA2B,EAAtC,CAAjB;AACAC,IAAAA,aAAa,CAAC;AAAC,cAAQsB,UAAT;AAAqB,kBAAYvB,UAAU,CAAC,UAAD;AAA3C,KAAD,CAAb;AACAK,IAAAA,aAAa,CAAC,GAAD,CAAb;AACD,GAJD,MAKK,IAAID,UAAU,IAAI,GAAlB,EAAuB;AAC1B,QAAImB,UAAU,GAAGC,IAAI,CAACC,KAAL,CAAW,CAACzB,UAAU,CAAC,MAAD,CAAV,GAAqB,EAAtB,IAA4B,CAA5B,GAA8B,CAAzC,CAAjB;AACAC,IAAAA,aAAa,CAAC;AAAC,cAAQsB,UAAT;AAAqB,kBAAYvB,UAAU,CAAC,UAAD;AAA3C,KAAD,CAAb;AACAK,IAAAA,aAAa,CAAC,GAAD,CAAb;AACD;AACF","sourcesContent":["import { useState } from 'react';\r\nimport axios, * as others from 'axios';\r\n\r\nconst [recentData, setRecentData] = useState( {\"Temp\": \"0\", \"Humidity\": \"0\"} );\r\nconst [deviceID, setDeviceID] = useState('12345');\r\nconst [tempMetric, setTempMetric] = useState('C');\r\nconst [lastUpdated, setLastUpdated] = useState('Last Updated: ---');\r\n\r\n\r\nexport async function updateRecentData(url) { // need to add a try/catch block for error catching\r\n    await axios.get(url) \r\n      .then((response) => {\r\n        setRecentData(response.data)\r\n        setLastUpdated(`Last Updated: ${currentTime()}`)\r\n      });\r\n  };\r\n\r\n\r\n  export function currentTime() {\r\n    var d = new Date(),\r\n    n = '',\r\n    h = (d.getHours()<10?'0':'') + d.getHours(),\r\n    m = (d.getMinutes()<10?'0':'') + d.getMinutes();\r\n\r\n    if (h > 12 && h < 24) {\r\n      h = h - 12;\r\n      n = 'PM';\r\n    }\r\n    else if (h == 24) {\r\n      h = h - 12;\r\n      n = 'AM';\r\n    }\r\n    else {\r\n      n = 'PM'\r\n    }\r\n\r\n    return(h + ':' + m + ' ' + n);\r\n  }\r\n\r\n\r\n  export function changeTempMetric() {\r\n    if (tempMetric == 'C') {\r\n      var conversion = Math.round(recentData['Temp'] * 9/5 + 32)\r\n      setRecentData({\"Temp\": conversion, \"Humidity\": recentData['Humidity']})\r\n      setTempMetric('F');\r\n    }\r\n    else if (tempMetric == 'F') {\r\n      var conversion = Math.round((recentData['Temp'] - 32) * 5/9)\r\n      setRecentData({\"Temp\": conversion, \"Humidity\": recentData['Humidity']})\r\n      setTempMetric('C');\r\n    }\r\n  }"]},"metadata":{},"sourceType":"module"}